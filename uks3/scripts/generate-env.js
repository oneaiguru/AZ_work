#!/usr/bin/env node
const { execSync } = require('node:child_process');
const crypto = require('node:crypto');
const fs = require('node:fs');
const path = require('node:path');

const ENV_PATH = path.resolve(__dirname, '..', '.env');
const args = process.argv.slice(2);
const force = args.includes('--force');
const rotateDb = args.includes('--rotate-db-password');

function randomSecret(length = 32) {
  return crypto.randomBytes(length).toString('base64').replace(/[^a-zA-Z0-9]/g, '').slice(0, length);
}

function loadEnv() {
  if (!fs.existsSync(ENV_PATH)) {
    return {};
  }

  const content = fs.readFileSync(ENV_PATH, 'utf8');
  return Object.fromEntries(
    content
      .split('\n')
      .filter((line) => line.trim() && !line.trim().startsWith('#'))
      .map((line) => {
        const index = line.indexOf('=');
        const key = line.slice(0, index);
        const value = line.slice(index + 1);
        return [key, value];
      })
  );
}

function writeEnv(env) {
  const order = [
    'TRAEFIK_PUBLIC_DOMAIN',
    'TRAEFIK_CMS_DOMAIN',
    'TRAEFIK_DB_DOMAIN',
    'TRAEFIK_EMAIL',
    'TRAEFIK_ACME_CHALLENGE',
    'DIRECTUS_ADMIN_EMAIL',
    'DIRECTUS_ADMIN_PASSWORD',
    'DIRECTUS_COOKIE_DOMAIN',
    'DIRECTUS_PUBLIC_URL',
    'DIRECTUS_REFRESH_COOKIE_SECURE',
    'DIRECTUS_STATIC_TOKEN',
    'POSTGRES_HOST',
    'POSTGRES_DB',
    'POSTGRES_USER',
    'POSTGRES_PASSWORD',
    'REDIS_HOST',
    'REDIS_PORT',
    'REDIS_PASSWORD',
    'MINIO_ROOT_USER',
    'MINIO_ROOT_PASSWORD',
    'MINIO_BUCKET_PUBLIC',
    'MINIO_BUCKET_PRIVATE',
    'PGADMIN_DEFAULT_EMAIL',
    'PGADMIN_DEFAULT_PASSWORD',
    'NEXT_PUBLIC_SITE_URL',
    'NEXT_PUBLIC_DIRECTUS_URL',
    'DIRECTUS_REDIS_ENABLED',
    'DIRECTUS_REDIS_HOST',
    'DIRECTUS_REDIS_PORT',
    'DIRECTUS_REDIS_PASSWORD',
    'DIRECTUS_STORAGE_LOCATIONS',
    'DIRECTUS_STORAGE_S3_DRIVER',
    'DIRECTUS_STORAGE_S3_KEY',
    'DIRECTUS_STORAGE_S3_SECRET',
    'DIRECTUS_STORAGE_S3_BUCKET',
    'DIRECTUS_STORAGE_S3_ENDPOINT',
    'DIRECTUS_STORAGE_S3_FORCE_PATH_STYLE',
    'DIRECTUS_STORAGE_S3_REGION'
  ];

  const lines = ['# Autogenerated by scripts/generate-env.js'];
  for (const key of order) {
    lines.push(`${key}=${env[key]}`);
  }

  fs.writeFileSync(ENV_PATH, lines.join('\n') + '\n');
}

function ensureEnv() {
  const env = loadEnv();

  if (fs.existsSync(ENV_PATH) && !force && !rotateDb) {
    console.log('.env already exists. Use --force to overwrite or --rotate-db-password to rotate credentials.');
    return env;
  }

  if (!fs.existsSync(ENV_PATH)) {
    console.log('Creating new .env file...');
  } else if (force) {
    console.log('Overwriting existing .env file...');
  }

  const postgresPassword = env.POSTGRES_PASSWORD ?? randomSecret(24);
  const redisPassword = env.REDIS_PASSWORD ?? randomSecret(24);
  const minioPassword = env.MINIO_ROOT_PASSWORD ?? randomSecret(30);
  const directusAdminPassword = env.DIRECTUS_ADMIN_PASSWORD ?? randomSecret(24);
  const directusStaticToken = env.DIRECTUS_STATIC_TOKEN ?? randomSecret(48);
  const pgAdminPassword = env.PGADMIN_DEFAULT_PASSWORD ?? randomSecret(24);

  const finalEnv = {
    TRAEFIK_PUBLIC_DOMAIN: 'uks.delightsoft.ru',
    TRAEFIK_CMS_DOMAIN: 'cms.uks.delightsoft.ru',
    TRAEFIK_DB_DOMAIN: 'db.uks.delightsoft.ru',
    TRAEFIK_EMAIL: env.TRAEFIK_EMAIL ?? 'infra@uks.delightsoft.ru',
    TRAEFIK_ACME_CHALLENGE: env.TRAEFIK_ACME_CHALLENGE ?? 'http01',
    DIRECTUS_ADMIN_EMAIL: env.DIRECTUS_ADMIN_EMAIL ?? 'admin@uks.delightsoft.ru',
    DIRECTUS_ADMIN_PASSWORD: directusAdminPassword,
    DIRECTUS_COOKIE_DOMAIN: env.DIRECTUS_COOKIE_DOMAIN ?? '.uks.delightsoft.ru',
    DIRECTUS_PUBLIC_URL: env.DIRECTUS_PUBLIC_URL ?? 'https://cms.uks.delightsoft.ru',
    DIRECTUS_REFRESH_COOKIE_SECURE: env.DIRECTUS_REFRESH_COOKIE_SECURE ?? 'true',
    DIRECTUS_STATIC_TOKEN: directusStaticToken,
    POSTGRES_HOST: 'postgres',
    POSTGRES_DB: env.POSTGRES_DB ?? 'uks3',
    POSTGRES_USER: env.POSTGRES_USER ?? 'uks3_admin',
    POSTGRES_PASSWORD: postgresPassword,
    REDIS_HOST: 'redis',
    REDIS_PORT: '6379',
    REDIS_PASSWORD: redisPassword,
    MINIO_ROOT_USER: env.MINIO_ROOT_USER ?? 'uks3minio',
    MINIO_ROOT_PASSWORD: minioPassword,
    MINIO_BUCKET_PUBLIC: env.MINIO_BUCKET_PUBLIC ?? 'public',
    MINIO_BUCKET_PRIVATE: env.MINIO_BUCKET_PRIVATE ?? 'private',
    PGADMIN_DEFAULT_EMAIL: env.PGADMIN_DEFAULT_EMAIL ?? 'pgadmin@uks.delightsoft.ru',
    PGADMIN_DEFAULT_PASSWORD: pgAdminPassword,
    NEXT_PUBLIC_SITE_URL: env.NEXT_PUBLIC_SITE_URL ?? 'https://uks.delightsoft.ru',
    NEXT_PUBLIC_DIRECTUS_URL: env.NEXT_PUBLIC_DIRECTUS_URL ?? 'https://cms.uks.delightsoft.ru',
    DIRECTUS_REDIS_ENABLED: env.DIRECTUS_REDIS_ENABLED ?? 'true',
    DIRECTUS_REDIS_HOST: env.DIRECTUS_REDIS_HOST ?? 'redis',
    DIRECTUS_REDIS_PORT: env.DIRECTUS_REDIS_PORT ?? '6379',
    DIRECTUS_REDIS_PASSWORD: env.DIRECTUS_REDIS_PASSWORD ?? redisPassword,
    DIRECTUS_STORAGE_LOCATIONS: env.DIRECTUS_STORAGE_LOCATIONS ?? 's3',
    DIRECTUS_STORAGE_S3_DRIVER: env.DIRECTUS_STORAGE_S3_DRIVER ?? 's3',
    DIRECTUS_STORAGE_S3_KEY: env.DIRECTUS_STORAGE_S3_KEY ?? (env.MINIO_ROOT_USER ?? 'uks3minio'),
    DIRECTUS_STORAGE_S3_SECRET: env.DIRECTUS_STORAGE_S3_SECRET ?? minioPassword,
    DIRECTUS_STORAGE_S3_BUCKET: env.DIRECTUS_STORAGE_S3_BUCKET ?? 'public',
    DIRECTUS_STORAGE_S3_ENDPOINT: env.DIRECTUS_STORAGE_S3_ENDPOINT ?? 'http://minio:9000',
    DIRECTUS_STORAGE_S3_FORCE_PATH_STYLE: env.DIRECTUS_STORAGE_S3_FORCE_PATH_STYLE ?? 'true',
    DIRECTUS_STORAGE_S3_REGION: env.DIRECTUS_STORAGE_S3_REGION ?? 'us-east-1'
  };

  writeEnv(finalEnv);
  console.log('Environment file generated at', ENV_PATH);
  return finalEnv;
}

function rotateDatabasePassword(env) {
  if (!rotateDb) return;

  const user = env.POSTGRES_USER ?? 'uks3_admin';
  const newPassword = randomSecret(24);
  try {
    console.log(`Rotating database password for user ${user}...`);
    execSync(`docker compose exec postgres psql -U ${user} -c "ALTER USER ${user} WITH PASSWORD '${newPassword}'"`, {
      stdio: 'inherit'
    });
    env.POSTGRES_PASSWORD = newPassword;
    writeEnv(env);
    console.log('Database password rotated successfully.');
  } catch (error) {
    console.error('Failed to rotate database password. Make sure docker compose services are running.', error);
    process.exitCode = 1;
  }
}

const env = ensureEnv();
if (env) {
  rotateDatabasePassword(env);
}
